🧩 Input:
arr = [1, 2, 3]

🔁 Dry Run Step-by-Step:

🧪 Initial call:
backtrack(0, [], res)
→ res = [[]]

🔹 i = 0 → Add 1:
current = [1]
backtrack(1, [1])
→ res = [[], [1]]

🔹 i = 1 → Add 2:
current = [1, 2]
backtrack(2, [1, 2])
→ res = [[], [1], [1, 2]]

🔹 i = 2 → Add 3:
current = [1, 2, 3]
backtrack(3, [1, 2, 3])
→ res = [[], [1], [1, 2], [1, 2, 3]]
🔙 Backtrack → remove 3 → current = [1, 2]
🔙 Backtrack → remove 2 → current = [1]

🔹 i = 2 → Add 3 to [1]:
current = [1, 3]
backtrack(3, [1, 3])
→ res = [[], [1], [1, 2], [1, 2, 3], [1, 3]]
🔙 Backtrack → remove 3 → current = [1]
🔙 Backtrack → remove 1 → current = []

🔹 i = 1 → Add 2:
current = [2]
backtrack(2, [2])
→ res = [..., [2]]

🔹 i = 2 → Add 3 to [2]:
current = [2, 3]
backtrack(3, [2, 3])
→ res = [..., [2], [2, 3]]
🔙 Backtrack → remove 3 → current = [2]
🔙 Backtrack → remove 2 → current = []

🔹 i = 2 → Add 3:
current = [3]
backtrack(3, [3])
→ res = [..., [3]]
✅ Final Result in res:

[[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]

🧠 Conclusion:
Every element is either picked or skipped.

Total subsets for n = 3 is 2^3 = 8.

This method is called backtracking / power set generation.
